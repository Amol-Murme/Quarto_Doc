---
title: "ABC Bank ltd."
execute:
   code-fold: true
   echo: false
format:
  docx:
    code-fold: true
    toc: true
    toc-depth: 3
    toc-location: right
    number-sections: true
    number-depth: 3
    standalone: true
    toc-title: Contents
  pdf:
    toc: true
    toc-depth: 3
    toc-location: right
    number-sections: true
    number-depth: 3
    standalone: true
    toc-title: Contents
    fig-align: center
    fig-pos: "H"

jupyter: python3
---

## {{< var Headings_h1 >}}
  [This document covers the model development process for **XGBoost_2_AutoML_20210218_195405** model. The model is a classification model that uses **XGBoost** with input data consisting of **20000** observations and **70** features. The model achieves Auto of **75.84%** on validation dataset and **74.98%** on Out-of-Sample (OOS) test dataset.]{id="editable_Headings_h1_p"}
{{< pagebreak >}}
## {{< var Headings_h2 >}}

```{python}
import pandas as pd
df = pd.read_csv('../input/MODEL_PERFORMANCE_SUMMARY.csv') 
#print(df.to_string(index= False))

from IPython.display import Markdown
from tabulate import tabulate
def align_table(tabulated ,align):

    if align == "right":
        if "-|" in tabulated:
            new_text = tabulated.replace("-|", ":|")
    elif align == "left":
        if "|-" in tabulated:
            new_text = tabulated.replace("|-", "|:") 
    else:
        new_text = tabulated.replace("|-", "|:")
        new_text = new_text.replace("-|", ":|")

    # print(new_text)
    return new_text
headers = df.columns.tolist()
table = df.values.tolist()
org_table = "\n\n"
org_table += align_table(tabulate(table, headers = headers, tablefmt="github"), "center")
org_table += "\n\n"
org_table += r': {tbl-colwidths="[50,50]"}'
org_table += "\n\n\n" 
#print(org_table)
Markdown(org_table)
```
{{< pagebreak >}}

## {{< var Headings_h3 >}}
  [Following dataset were used for model training, tuning and OOS performance estimation:]{id="editable_Headings_h3_p"}

```{python}
import pandas as pd
df = pd.read_csv('../input/DATASET.csv')
#print(df.to_string(index= False))

from IPython.display import Markdown
from tabulate import tabulate
def align_table(tabulated ,align):

    if align == "right":
        if "-|" in tabulated:
            new_text = tabulated.replace("-|", ":|")
    elif align == "left":
        if "|-" in tabulated:
            new_text = tabulated.replace("|-", "|:") 
    else:
        new_text = tabulated.replace("|-", "|:")
        new_text = new_text.replace("-|", ":|")

    # print(new_text)
    return new_text
headers = df.columns.tolist()
table = df.values.tolist()
org_table = "\n\n"
org_table += align_table(tabulate(table, headers = headers, tablefmt="github"), "center")
org_table += "\n\n"
org_table += r': {tbl-colwidths="[50,50]"}'
org_table += "\n\n\n" 
#print(org_table)
Markdown(org_table)
```
{{< pagebreak >}}

## {{< var Headings_h4 >}}
  [Following is a summary of input data. Refer Annexure-1 for detailed EDA.]{id="editable_Headings_h4_p"}
```{python}
import pandas as pd
df = pd.read_csv('../input/EDA.csv')
#print(df.to_string(index= False))

from IPython.display import Markdown
from tabulate import tabulate
def align_table(tabulated ,align):

    if align == "right":
        if "-|" in tabulated:
            new_text = tabulated.replace("-|", ":|")
    elif align == "left":
        if "|-" in tabulated:
            new_text = tabulated.replace("|-", "|:") 
    else:
        new_text = tabulated.replace("|-", "|:")
        new_text = new_text.replace("-|", ":|")

    # print(new_text)
    return new_text
headers = df.columns.tolist()
table = df.values.tolist()
org_table = "\n\n"
org_table += align_table(tabulate(table, headers = headers, tablefmt="github"), "center")
org_table += "\n\n"
#org_table += r': {tbl-colwidths="[34,33,33]"}'
org_table += "\n\n\n" 
#print(org_table)
Markdown(org_table)
```
{{< pagebreak >}}

## {{< var Headings_h5 >}}
  [XGBoost is a machine learning technique for regression and classification problems, which produces a prediction model in the form of an ensemble of weak prediction models, typically decision trees. It builds the model in a stage-wise fashion by optimization of a loss function.]{id="editable_Headings_h5_p"}

[Following is a summary of steps performed to train the model:]{id="editable_editable_Headings_h5_p1"}


 ![Model Development Pipeline](../input/Model_development_pipeline.png)

### {{< var Headings_h5_1 >}}
  [The dataset is randomly split into train, validation and holdout test datasets. Train data is used for model fitting. Validation dataset is used for model tuning i.e. finding the optimal combination of hyperparameters that provide the best fit on a given dataset. Holdout test dataset is used to arrive at an unbiased estimate of OOS performance of the model.]{id="editable_Headings_h5_1"}

### {{< var Headings_h5_2 >}}
  [Typically all features are converted into numeric features. This is a mandatory transformation for many algorithms such as XGBoost.]{id="editable_Headings_h5_2_p"}


### {{< var Headings_h5_3 >}}
  [Various models are fitted to the train dataset with multiple combination of hyperparameters (HP). These HP typically control model capacity (large capacity models will provide better fit on train data but may fail to generalize to OOS dataset), model complexity (typically models with larger capacity are also more complex) and model generalization (to prevent overfitting to train data).]{id="editable_Headings_h5_3_p"}


### {{< var Headings_h5_4 >}}
  [Performance of trained models is compared on validation dataset using different statistics. Final HP combination and the resultant final model is selected on basis of performance on the validation dataset.]{id="editable_Headings_h5_4_p"}


### {{< var Headings_h5_5 >}}
  [Model stability is checked by detecting drift/shift in features between train, validation and test dataset. This is done by computing Stability Index at model and individual feature level to identify if model is stable or not.]{id="editable_Headings_h5_5_p"}
{{< pagebreak >}}

## {{< var Headings_h6 >}}
  [Detailed Information regarding model.]{id="editable_Headings_h6_p"}

### {{< var Headings_h6_1 >}}
  [Following is a summary of key model hyperparameters:]{id="editable_Headings_h6_1_p"}
```{python}
import pandas as pd

df = pd.read_csv('../input/Model_Hyperparameters.csv')
#print(df.to_string(index= False))

from IPython.display import Markdown
from tabulate import tabulate
def align_table(tabulated ,align):

    if align == "right":
        if "-|" in tabulated:
            new_text = tabulated.replace("-|", ":|")
    elif align == "left":
        if "|-" in tabulated:
            new_text = tabulated.replace("|-", "|:") 
    else:
        new_text = tabulated.replace("|-", "|:")
        new_text = new_text.replace("-|", ":|")

    # print(new_text)
    return new_text
headers = df.columns.tolist()
table = df.values.tolist()
org_table = "\n\n"
org_table += align_table(tabulate(table, headers = headers, tablefmt="github"), "center")
org_table += "\n\n"
org_table += r': {tbl-colwidths="[50,50]"}'
org_table += "\n\n\n" 
#print(org_table)
Markdown(org_table)

# print(tabulate(
#   table, 
#   headers=df.columns,
#   tablefmt= "grid"
# ))
```


### {{< var Headings_h6_2 >}}
  
[Following is a list of important features for the model:]{id="editable_Headings_h6_2_p"}

 ![Global Variable Importance Graph](../input/Important_Features.png)
  
[Partial Dependence Plots for Top-2 variables are shown below:]{id="editable_Headings_h6_2_p1"}

 ![Partial Dependence Plot for Top-2 Variables](../input/PDP.png)




### {{< var Headings_h6_3 >}}

[Following are the model performance statistics on validation and OOS test dataset:]{id="editable_Headings_h6_3"}

**Validation dataset**

 ![Model Performance on Validation dataset](../input/Model_Perf_on_Validation_Dataset.png){width="400"}

**Test dataset**

 ![Model Performance on Test dataset](../input/Model_Perf_on_Test_Dataset.png){width="400"}

### {{< var Headings_h6_4 >}}

 [Following are model stability statistics:]{id="editable_Headings_h6_4"}

  **Train vs. Validation dataset**
   ![Model Stability (Val vs. Train dataset)](../input/Train%20_vs_%20Validation%20_dataset.png){width="400"}

  **Validation vs. Test dataset**
   ![Model Stability (Val vs. Test dataset)](../input/Validation_vs_Test%20dataset.png){width="400"}

### {{< var Headings_h6_5 >}}

 [Following is a summary of change in model performance statistics with increase in number of trees.]{id="editable_Headings_h6_5_p"}
    
 ![Model Scoring History](../input/Scoring_History.png){width="500"}

